{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://js2/./src/index.ts","webpack://js2/./src/drawField.ts","webpack://js2/./src/getCellState.ts","webpack://js2/./src/createGameOfLife.ts","webpack://js2/./src/getNextState.ts","webpack://js2/./src/getNewCellState.ts","webpack://js2/./src/getNumOfAliveNeighbours.ts","webpack://js2/./src/isAnyoneAlive.ts","webpack://js2/webpack/bootstrap","webpack://js2/webpack/runtime/define property getters","webpack://js2/webpack/runtime/hasOwnProperty shorthand","webpack://js2/webpack/runtime/make namespace object"],"sourcesContent":["// Запуск игры\n//\n// - создать элемент и добавить его на страницу\n// - создать на этом элементе игру с помощью `createGameOfLife` с размерами поля x / y\n\nconst { createGameOfLife } = require(\"./createGameOfLife\");\n\n// - для проверки своего кода можно создать еще один элемент и создать вторую игру на этой же странице\n\nconst gameWrapper = document.createElement(\"div\");\n\ndocument.body.appendChild(gameWrapper);\n\ncreateGameOfLife(15, 15, gameWrapper);\n","/**\n * отрисовка поля\n * @param field {number[][]} - состояние поля\n * @param htmlElement {HTMLElement} - элемент, в котором будет отрисовано поле\n * @param onCellClick {(x: number, y: number) => void}\n * @returns void\n */\n// @ts-ignore\nexport function drawField(htmlElement, field, onCellClick) {\n  const rowIterator = (row: [], rowIndex: number) => {\n    return `<tr>${row\n      .map((cell, columnIndex) => {\n        if (cell === 1) {\n          return `<td \n        data-x=${columnIndex}\n        data-y=${rowIndex}\n        class=\"cell alive\" \n        style=\"background-color:#FA58D0; height:10px; width:10px;\"></td>`;\n        }\n        return `<td \n      data-x=${columnIndex}\n      data-y=${rowIndex}\n      class=\"cell dead\" \n      style=\"background-color:#FFFFFF; height:10px; width:10px;\"></td>`;\n      })\n      .join(\"\")}</tr>`;\n  };\n\n  const table = `<table border=1 id=\"tab\">${field\n    .map(rowIterator)\n    .join(\"\")}</table>`;\n\n  // eslint-disable-next-line no-param-reassign\n  htmlElement.innerHTML = table;\n\n  htmlElement.querySelector(\"table\")!.addEventListener(\"click\", (ev: Event) => {\n    const clickedElement = ev.target as HTMLTableElement;\n\n    const x = clickedElement!.getAttribute(\"data-x\");\n\n    const y = clickedElement!.getAttribute(\"data-y\");\n    if (Number(x) >= 0 && Number(y) >= 0) {\n      onCellClick(Number(x), Number(y));\n    }\n  });\n}\n","/**\n * получить состояние клетки\n * @param field {number[][]} - состояние поля\n * @param x {number} - номер колонки\n * @param y {number} - номер строки\n * @return number\n */\nexport function getCellState(field: number[][], x: number, y: number) {\n  const row = field[y];\n  if (row === undefined) {\n    return 0;\n  }\n  const cell = row[x];\n  if (cell === undefined) {\n    return 0;\n  }\n  return cell;\n}\n","/* eslint-disable no-param-reassign */\n\nimport { drawField } from \"./drawField\";\nimport { getNextState } from \"./getNextState\";\nimport { isAnyoneAlive } from \"./isAnyoneAlive\";\n\n/**\n * Создание игры Жизнь\n * @param sizeX {number} - число колонок\n * @param sizeY {number} - число строк\n * @param htmlElement {} - элемент, в котором будет отрисована игра\n * @returns void\n */\nexport function createGameOfLife(\n  sizeX: number,\n  sizeY: number,\n  htmlElement: HTMLElement\n) {\n  let gameIsRunning = false;\n  let timer: number;\n\n  // Создать блок для поля\n  // Создать кнопку управления игрой\n  htmlElement.innerHTML = `<div class=\"field-wrapper\"></div><button>Start</button><input type=\"range\" value=\"1000\" min=\"100\" max=\"1000\" step=\"50\"></input><label>speed</label>`;\n  const fieldWrapper = htmlElement.querySelector(\".field-wrapper\");\n  const button = htmlElement.querySelector(\"button\");\n\n  // Создать поле заданного размера\n  let field = Array.from({ length: sizeY }).map(() =>\n    Array.from({ length: sizeX }).fill(0)\n  );\n\n  const cellClickHandler = (x: number, y: number) => {\n    field[y][x] = field[y][x] === 0 ? 1 : 0;\n    drawField(fieldWrapper, field, cellClickHandler);\n  };\n\n  // Отрисовать поле заданного размера\n  drawField(fieldWrapper, field, cellClickHandler);\n  // При клике по ячейке поля\n  // - поменять его состояние\n  // - перерисовать поле\n  function stopGame() {\n    gameIsRunning = false;\n\n    button!.innerHTML = \"Start\";\n    // При клике на кнопке `Stop` остановить таймер\n    clearInterval(timer);\n  }\n\n  function startGame() {\n    // При клике по кнопке старт\n    // - поменять надпись на `Stop`\n    gameIsRunning = true;\n\n    button!.innerHTML = \"Stop\";\n\n    // - запустить таймер для обновления поля\n\n    const input = htmlElement.querySelector(\"input\");\n    let speed = +input!.value;\n    //let changeSpeed = speed;\n    function speedValue() {\n      clearInterval(timer);\n      speed = +input!.value;\n      timer = window.setInterval(interval, speed);\n    }\n\n    function interval() {\n      // В таймере обновления поля\n      // - посчитать новое состояние поля\n      // - отрисовать новое состояние поля\n      // - проверить, что есть живые клетки\n      // - если живых клеток нет\n      //    - остановить таймер\n      //    - вывести сообщение\n      field = getNextState(field as number[][]);\n      drawField(fieldWrapper, field, cellClickHandler);\n      if (!isAnyoneAlive(field as number[][])) {\n        alert(\"Death on the block\");\n        stopGame();\n      }\n      if (speed != +input!.value) {\n        speedValue();\n      }\n    }\n\n    timer = window.setInterval(interval, speed);\n  }\n\n  button!.addEventListener(\"click\", () => {\n    if (!gameIsRunning) {\n      startGame();\n    } else {\n      stopGame();\n    }\n  });\n}\n","import { getNumOfAliveNeighbours } from \"./getNumOfAliveNeighbours\";\nimport { getCellState } from \"./getCellState\";\nimport { getNewCellState } from \"./getNewCellState\";\n\n/**\n * получить новое состояние\n * @param field {number[][]} - состояние поля\n * @return number[][] - новое состояние поля\n */\nexport function getNextState(field: number[][]) {\n  // return field.map((row, rowIndex) =>\n  //   {\n  //     return row.map((cell, cellIndex) =>\n  //     {\n  //       const aliveNeighbours = getNumOfAliveNeighbours(cellIndex,rowIndex, field);\n  //       const currentState = getCellState(field, cellIndex, rowIndex);\n  //       const newState = getNewCellState(currentState, aliveNeighbours);\n  //       return newState;\n  //     })\n  //   });\n\n  return field.map((row, rowIndex) =>\n    row.map((cell, cellIndex) => {\n      const an = getNumOfAliveNeighbours(cellIndex, rowIndex, field);\n      const currentState = getCellState(field, cellIndex, rowIndex);\n      const newState = getNewCellState(currentState, an);\n      return newState;\n    })\n  );\n}\n","export function getNewCellState(\n  currentCellState: number,\n  numOfAliveNeighbours: number\n) {\n  if (\n    (numOfAliveNeighbours === 2 && currentCellState === 1) ||\n    numOfAliveNeighbours === 3\n  ) {\n    return 1;\n  }\n  return 0;\n}\n","import { getCellState } from \"./getCellState\";\n\n/**\n * узнать сколько живых соседей вокруг клетки\n * @param column {number} - номер колонки\n * @param row {number} - номер строки\n * @param field {number[][]} - состояние поля\n * @return number - число живых соседей\n */\nexport function getNumOfAliveNeighbours(\n  column: number,\n  row: number,\n  field: number[][]\n) {\n  let neighbours = 0;\n\n  for (let j = column - 1; j <= column + 1; j += 1) {\n    neighbours += Number(getCellState(field, j, row - 1));\n    neighbours += Number(getCellState(field, j, row + 1));\n  }\n\n  neighbours += Number(getCellState(field, column - 1, row));\n  neighbours += Number(getCellState(field, column + 1, row));\n\n  return neighbours;\n}\n","/**\n * проверка что есть живые клетки\n * @param field {number[][]} - состояние поля\n * @return boolean\n */\nexport function isAnyoneAlive(field: number[][]) {\n  for (let i = 0; i < field.length; i += 1) {\n    const row = field[i];\n    for (let j = 0; j < row.length; j += 1) {\n      const cell = row[j];\n      if (cell) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};"],"names":["createGameOfLife","gameWrapper","drawField","htmlElement","field","onCellClick","table","map","row","rowIndex","cell","columnIndex","join","innerHTML","querySelector","addEventListener","ev","clickedElement","target","x","getAttribute","y","Number","getCellState","undefined","sizeX","sizeY","timer","gameIsRunning","fieldWrapper","button","Array","from","length","fill","cellClickHandler","stopGame","clearInterval","startGame","input","speed","value","window","setInterval","interval","cellIndex","numOfAliveNeighbours","an","column","neighbours","j","getNumOfAliveNeighbours","currentState","getNextState","i","isAnyoneAlive","alert","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","d","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","r","Symbol","toStringTag","require","document","createElement","body","appendChild"],"sourceRoot":""}